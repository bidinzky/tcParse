import { caller } from "@ark/fs";
import { throwError } from "@ark/util";
import { basename, relative } from "node:path";
export const getFileKey = (path) => relative(".", path);
/**
 *  Can be used to allow arbitrarily chained property access and function calls.
 */
export const chainableNoOpProxy = new Proxy(() => chainableNoOpProxy, {
    get: () => chainableNoOpProxy
});
const testDirName = "__tests__";
const testSuffix = ".test.ts";
const contextualizeRoot = (first, contextualTests) => {
    const describe = globalThis.describe;
    if (!describe) {
        throw new Error(`contextualize cannot be used without a global 'describe' function.`);
    }
    const filePath = caller().file;
    const testsDirChar = filePath.search(testDirName);
    const suiteNamePath = testsDirChar === -1 ?
        basename(filePath)
        : filePath.slice(testsDirChar + testDirName.length + 1);
    const suiteName = suiteNamePath.slice(0, -testSuffix.length);
    if (contextualTests) {
        describe(suiteName, () => contextualTests((name, test) => {
            it(name, () => test(first()));
        }));
    }
    else
        describe(suiteName, first);
};
const contextualizeEach = (name, createCtx, tests) => {
    const describe = globalThis.describe;
    if (!describe)
        throwNoDescribeError();
    describe(name, () => tests((name, test) => {
        it(name, () => test(createCtx()));
    }));
};
export const contextualize = Object.assign(contextualizeRoot, {
    each: contextualizeEach
});
const throwNoDescribeError = () => throwError("contextualize cannot be used without a global 'describe' function.");
