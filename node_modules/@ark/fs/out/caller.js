import path from "node:path";
import * as process from "node:process";
import { fileURLToPath } from "node:url";
import { isDeepStrictEqual } from "node:util";
import { getCurrentLine, getFramesFromError } from "./getCurrentLine.js";
export const getCallStack = ({ offset = 0 } = {}) => {
    const frames = getFramesFromError(new Error());
    frames.splice(1, 1 + offset);
    return frames;
};
const nonexistentCurrentLine = {
    line: -1,
    char: -1,
    method: "",
    file: ""
};
export const positionToString = (position) => `line ${position.line}, character ${position.char} at path '${position.file}'`;
export const formatFilePath = (original, { relative, separator }) => {
    let formatted = original;
    if (original.startsWith("file:///"))
        formatted = fileURLToPath(original);
    if (relative) {
        formatted = path.relative(typeof relative === "string" ? relative : process.cwd(), formatted);
    }
    if (separator) {
        formatted = formatted.replaceAll(new RegExp(`\\${path.sep}`, "g"), separator);
    }
    return formatted;
};
export const caller = (options = {}) => {
    let upStackBy = options.upStackBy ?? 0;
    if (!options.methodName && !options.upStackBy)
        upStackBy = 3;
    let match;
    while (!match) {
        const location = getCurrentLine({
            method: options.methodName,
            frames: upStackBy
        });
        if (!location || isDeepStrictEqual(location, nonexistentCurrentLine)) {
            throw new Error(`No caller of '${options.methodName}' matches given options: ${JSON.stringify(options, null, 4)}.`);
        }
        const candidate = {
            ...location,
            file: formatFilePath(location.file, options.formatPath ?? {})
        };
        if (options.skip?.(candidate))
            upStackBy++;
        else
            match = candidate;
    }
    if (match.file.startsWith("file:///"))
        match.file = fileURLToPath(match.file);
    return match;
};
export const callsAgo = (num, options = {}) => caller({ methodName: "callsAgo", upStackBy: num, ...options });
