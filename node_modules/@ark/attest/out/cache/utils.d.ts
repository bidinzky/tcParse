import * as tsvfs from "@typescript/vfs";
import ts from "typescript";
import type { LinePositionRange } from "./writeAssertionCache.ts";
export declare const getCallLocationFromCallExpression: (callExpression: ts.CallExpression) => LinePositionRange;
/**
 * Processes inline instantiations from an attest call
 * Preserves any JSDoc comments that are associated with the original expression
 */
export declare const gatherInlineInstantiationData: (file: ts.SourceFile, assertionsByFile: Record<string, any[]>, instantiationMethodCalls: string[]) => void;
export declare const getCallExpressionsByName: (startNode: ts.Node, names: string[], isSnapCall?: boolean) => ts.CallExpression[];
export declare const getInstantiationsContributedByNode: (file: ts.SourceFile, benchBlock: ts.FunctionExpression | ts.ArrowFunction) => number;
export declare const createOrUpdateFile: (env: tsvfs.VirtualTypeScriptEnvironment, fileName: string, fileText: string) => ts.SourceFile | undefined;
declare module "typescript" {
    interface SourceFile {
        imports: ts.StringLiteral[];
    }
    interface Program {
        getResolvedModuleFromModuleSpecifier(moduleSpecifier: ts.StringLiteralLike, sourceFile?: ts.SourceFile): ts.ResolvedModuleWithFailedLookupLocations;
    }
}
export declare const getIsolatedEnv: () => tsvfs.VirtualTypeScriptEnvironment;
