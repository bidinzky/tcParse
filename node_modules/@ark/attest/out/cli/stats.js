import { execSync } from "node:child_process";
import { baseDiagnosticTscCmd } from "./shared.js";
export const stats = (args) => {
    const packageDirs = args.length ? args : [process.cwd()];
    const listedStats = packageDirs.map((packageDir) => {
        console.log(`⏳ Gathering type perf data for ${packageDir}...`);
        let output;
        try {
            output = execSync(baseDiagnosticTscCmd, {
                cwd: packageDir,
                stdio: "pipe"
            }).toString();
        }
        catch (e) {
            output = e.stdout?.toString() ?? "";
            output += e.stderr?.toString() ?? "";
            console.error(`❗Encountered one or more errors checking types for ${packageDir}- results may be inaccurate❗`);
        }
        const stats = parseTsDiagnosticsOutput(output);
        logTypePerfStats(stats);
        return stats;
    });
    const aggregatedStats = listedStats.reduce((aggregatedStats, packageStats) => ({
        checkTime: aggregatedStats.checkTime + packageStats.checkTime,
        types: aggregatedStats.types + packageStats.types,
        instantiations: aggregatedStats.instantiations + packageStats.instantiations
    }), {
        checkTime: 0,
        types: 0,
        instantiations: 0
    });
    console.log("📊 aggregated type performance:");
    logTypePerfStats(aggregatedStats);
};
const parseTsDiagnosticsOutput = (output) => {
    const lines = output.split("\n");
    const results = {
        checkTime: 0,
        types: 0,
        instantiations: 0
    };
    for (const line of lines) {
        if (line.startsWith("Check time:"))
            results.checkTime = parseFloat(line.split(":")[1].trim());
        else if (line.startsWith("Types:"))
            results.types = parseInt(line.split(":")[1].trim(), 10);
        else if (line.startsWith("Instantiations:"))
            results.instantiations = parseInt(line.split(":")[1].trim(), 10);
    }
    return results;
};
const logTypePerfStats = (stats) => {
    console.log(JSON.stringify(stats, null, 4));
};
