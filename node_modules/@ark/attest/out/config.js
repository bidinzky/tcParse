import { ensureDir, fromCwd } from "@ark/fs";
import { isArray, liftArray, tryParseNumber } from "@ark/util";
import { existsSync } from "node:fs";
import { join, resolve } from "node:path";
import { findAttestTypeScriptVersions } from "./tsVersioning.js";
export const getDefaultAttestConfig = () => ({
    tsconfig: existsSync(fromCwd("tsconfig.json")) ? fromCwd("tsconfig.json") : undefined,
    compilerOptions: {},
    attestAliases: ["attest", "attestInternal"],
    failOnMissingSnapshots: "CI" in process.env,
    updateSnapshots: false,
    skipTypes: false,
    skipInlineInstantiations: false,
    tsVersions: "default",
    benchPercentThreshold: 20,
    benchErrorOnThresholdExceeded: true,
    filter: undefined,
    testDeclarationAliases: ["bench", "it", "test"],
    formatCmd: `npm exec --no -- prettier --write`,
    shouldFormat: true,
    typeToStringFormat: {}
});
const flagAliases = {
    updateSnapshots: ["u", "update"]
};
const findParamIndex = (flagOrAlias) => process.argv.findIndex(arg => arg === `-${flagOrAlias}` || arg === `--${flagOrAlias}`);
const hasFlag = (flag) => findParamIndex(flag) !== -1 ||
    flagAliases[flag]?.some(alias => findParamIndex(alias) !== -1);
const getParamValue = (param) => {
    let paramIndex = findParamIndex(param);
    if (paramIndex === -1) {
        if (!flagAliases[param])
            return;
        for (let i = 0; i < flagAliases[param].length && paramIndex === -1; i++)
            paramIndex = findParamIndex(flagAliases[param][i]);
        if (paramIndex === -1)
            return;
    }
    const raw = process.argv[paramIndex + 1];
    if (raw === "true")
        return true;
    if (raw === "false")
        return false;
    if (raw === "null")
        return null;
    if (param === "benchPercentThreshold")
        return tryParseNumber(raw, { errorOnFail: true });
    if (param === "tsVersions" || param === "attestAliases")
        return raw.split(",");
    if (param === "typeToStringFormat" || param === "compilerOptions")
        return JSON.parse(raw);
    return raw;
};
export const attestEnvPrefix = "ATTEST_";
const addEnvConfig = (config) => {
    for (const [k, v] of Object.entries(process.env)) {
        if (k.startsWith(attestEnvPrefix)) {
            const optionName = k.slice(attestEnvPrefix.length);
            if (optionName === "CONFIG")
                Object.assign(config, JSON.parse(v));
            else
                config[optionName] = JSON.parse(v);
        }
    }
    let k;
    for (k in config) {
        if (config[k] === false)
            config[k] = hasFlag(k);
        else {
            const value = getParamValue(k);
            if (value !== undefined)
                config[k] = value;
        }
    }
    return config;
};
const parseConfig = () => {
    const baseConfig = addEnvConfig(getDefaultAttestConfig());
    const cacheDir = resolve(".attest");
    const assertionCacheDir = join(cacheDir, "assertions");
    const defaultAssertionCachePath = join(assertionCacheDir, "typescript.json");
    return Object.assign(baseConfig, {
        cacheDir,
        assertionCacheDir,
        defaultAssertionCachePath,
        tsVersions: baseConfig.skipTypes ? []
            : isTsVersionAliases(baseConfig.tsVersions) ?
                parseTsVersions(baseConfig.tsVersions)
                : baseConfig.tsVersions
    });
};
const isTsVersionAliases = (v) => typeof v === "string" || (isArray(v) && typeof v[0] === "string");
const parseTsVersions = (aliases) => {
    const versions = findAttestTypeScriptVersions();
    if (aliases === "*" || (isArray(aliases) && aliases[0] === "*"))
        return versions;
    return liftArray(aliases).map(alias => {
        const matching = versions.find(v => v.alias === alias);
        if (!matching) {
            throw new Error(`Specified TypeScript version ${alias} does not exist.` +
                ` It should probably be specified in package.json like:
"@ark/attest-ts-${alias}": "npm:typescript@latest"`);
        }
        return matching;
    });
};
let cachedConfig;
export const getConfig = () => parseConfig();
export const ensureCacheDirs = () => {
    cachedConfig ??= getConfig();
    ensureDir(cachedConfig.cacheDir);
    ensureDir(cachedConfig.assertionCacheDir);
};
