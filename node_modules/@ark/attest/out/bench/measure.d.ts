import type { StatName } from "./bench.ts";
type MeasureUnit = TimeUnit | TypeUnit;
export type Measure<Unit extends MeasureUnit = MeasureUnit> = [
    value: number,
    unit: Unit
];
export type MeasureComparison<Unit extends MeasureUnit = MeasureUnit> = {
    updated: Measure<Unit>;
    baseline: Measure<Unit> | undefined;
};
export type MarkMeasure = Partial<Record<StatName, Measure>>;
export declare const stringifyMeasure: ([value, units]: Measure) => string;
export declare const TYPE_UNITS: readonly ["instantiations"];
export type TypeUnit = (typeof TYPE_UNITS)[number];
export declare const createTypeComparison: (value: number, baseline: Measure<TypeUnit> | undefined) => MeasureComparison<TypeUnit>;
export declare const timeUnitRatios: {
    ns: number;
    us: number;
    ms: number;
    s: number;
};
export type TimeUnit = keyof typeof timeUnitRatios;
export declare const stringifyTimeMeasure: ([value, unit]: Measure<TimeUnit>) => string;
/**
 * Establish a new baseline using the most appropriate time unit
 */
export declare const createTimeMeasure: (ms: number) => Measure<TimeUnit>;
export declare const createTimeComparison: (ms: number, baseline: Measure<TimeUnit> | undefined) => MeasureComparison<TimeUnit>;
export {};
